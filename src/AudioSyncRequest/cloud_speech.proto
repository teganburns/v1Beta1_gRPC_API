

syntax = "proto3";

package google.cloud.speech.v1beta1;


service Speech {

  rpc SyncRecognize(SyncRecognizeRequest) returns (SyncRecognizeResponse) {}

  rpc AsyncRecognize(AsyncRecognizeRequest) returns (Operation) {}

  rpc StreamingRecognize(stream StreamingRecognizeRequest) returns (stream StreamingRecognizeResponse) {}
}

message SyncRecognizeRequest {
  RecognitionConfig config = 1;

  RecognitionAudio audio = 2;
}


message AsyncRecognizeRequest {
  RecognitionConfig config = 1;

  RecognitionAudio audio = 2;
}


message StreamingRecognizeRequest {
  oneof streaming_request {

    StreamingRecognitionConfig streaming_config = 1;


    bytes audio_content = 2;
  }
}

message StreamingRecognitionConfig {

  RecognitionConfig config = 1;

  bool single_utterance = 2;

  bool interim_results = 3;
}


message RecognitionConfig {

  enum AudioEncoding {

    ENCODING_UNSPECIFIED = 0;

    LINEAR16 = 1;

    FLAC = 2;

    MULAW = 3;

    AMR = 4;

    AMR_WB = 5;
  }

  AudioEncoding encoding = 1;

  int32 sample_rate = 2;

  string language_code = 3;

  int32 max_alternatives = 4;

  bool profanity_filter = 5;

  SpeechContext speech_context = 6;
}


message SpeechContext {

  repeated string phrases = 1;
}


message RecognitionAudio {
  oneof audio_source {

    bytes content = 1;

    string uri = 2;
  }
}


message SyncRecognizeResponse {

  repeated SpeechRecognitionResult results = 2;
}


message AsyncRecognizeResponse {

  repeated SpeechRecognitionResult results = 2;
}

message Operation {
  

}


message StreamingRecognizeResponse {

  enum EndpointerType {

    ENDPOINTER_EVENT_UNSPECIFIED = 0;

    START_OF_SPEECH = 1;

    END_OF_SPEECH = 2;

    END_OF_AUDIO = 3;

    END_OF_UTTERANCE = 4;
  }

  // [Output-only] If set, returns a [google.rpc.Status][] message that
  // specifies the error for the operation.
  // google.rpc.Status error = 1;
  // status error = 1;

  repeated StreamingRecognitionResult results = 2;

  int32 result_index = 3;

  EndpointerType endpointer_type = 4;
}


message StreamingRecognitionResult {

  repeated SpeechRecognitionAlternative alternatives = 1;

  bool is_final = 2;

  float stability = 3;
}

message SpeechRecognitionResult {

  repeated SpeechRecognitionAlternative alternatives = 1;
}

  message SpeechRecognitionAlternative {

  string transcript = 1;

  float confidence = 2;
}
